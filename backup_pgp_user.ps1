########################################################################
# Generated On: 31.10.2013
# Generated By: Sergey.Pikalev
# Modified On: 12.07.2014
# Modified By: Sergey.Pikalev
# Version: 0.45
########################################################################

param([string]$global:file)
$ScriptDir = Split-Path $MyInvocation.MyCommand.Path -Parent
$global:usrprofile = $env:userprofile
$global:usrname = $env:username
$global:file_size_for_speed_test=10Mb
$global:a = new-object -comobject wscript.shell  #для вывода разных сообщений
$global:stage=0
$global:stopped=$false

#Generated Form Function
function GenerateForm {
#region Import the Assemblies
[reflection.assembly]::loadwithpartialname("System.Windows.Forms") | Out-Null
[reflection.assembly]::loadwithpartialname("System.Drawing") | Out-Null
#endregion

#region Generated Form Objects
$global:form1 = New-Object System.Windows.Forms.Form
$global:label4 = New-Object System.Windows.Forms.Label
$global:label3 = New-Object System.Windows.Forms.Label
$global:label2 = New-Object System.Windows.Forms.Label
$pictureBox1 = New-Object System.Windows.Forms.PictureBox
$global:label1 = New-Object System.Windows.Forms.Label
$global:button2 = New-Object System.Windows.Forms.Button
$global:button3 = New-Object System.Windows.Forms.Button
$global:buttonfinish = New-Object System.Windows.Forms.Button
$global:buttonstop = New-Object System.Windows.Forms.Button
$global:button1 = New-Object System.Windows.Forms.Button
$InitialFormWindowState = New-Object System.Windows.Forms.FormWindowState
$global:progressbar = New-Object System.Windows.Forms.ProgressBar
$global:JobTrackerList = New-Object System.Collections.ArrayList
#endregion Generated Form Objects

#----------------------------------------------
#Generated Event Script Blocks
#----------------------------------------------
#Provide Custom Code for events specified in PrimalForms.
$handler_form1_Load= 
{
#TODO: Place custom script here
}

$handler_label2_Click= 
{
#TODO: Place custom script here
}

$handler_button2_Click= 
{
#TODO: Place custom script here
$form1.close()
}

$handler_label1_Click= 
{
#TODO: Place custom script here
}

$handler_button1_Click= 
{
Preparing
$form1.Controls.Remove($button1)
$form1.Controls.Add($button3)
#TODO: Place custom script here
}

$handler_button3_Click= 
{
$error=@(Backup)
if ($error.length -eq 0) {
	$form1.Controls.Remove($button2)
	$form1.Controls.Remove($button3)
	$form1.Controls.Add($buttonfinish)
}
#TODO: Place custom script here
}

$handler_buttonfinish_Click= 
{
$form1.close()
#TODO: Place custom script here
}

$handler_buttonstop_Click=
{
$global:stopped=$True
$form1.Controls.Remove($buttonstop)
$form1.Controls.Add($buttonfinish)
}

$OnLoadForm_StateCorrection=
{
#Correct the initial state of the form to prevent the .Net maximized form issue
	$form1.WindowState = $InitialFormWindowState
}

#----------------------------------------------
#region Generated Form Code
$form1.BackColor = [System.Drawing.Color]::FromArgb(255,255,255,255)
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 261
$System_Drawing_Size.Width = 520
$form1.ClientSize = $System_Drawing_Size

$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 300
$System_Drawing_Size.Width = 536
$form1.MaximumSize = $System_Drawing_Size
$form1.MinimizeBox = $False
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 300
$System_Drawing_Size.Width = 536
$form1.MinimumSize = $System_Drawing_Size


$form1.ControlBox = $False
$form1.DataBindings.DefaultDataSourceUpdateMode = 0
$form1.MaximizeBox = $False
$form1.MinimizeBox = $False
$form1.Name = "form1"
$form1.Text = "Система резервирования PGP дисков"

#$form1.add_Load($handler_form1_Load)
#$form1.AllowDrop = $true
#$form1.add_DragEnter($handler_dragdrop)


$label4.DataBindings.DefaultDataSourceUpdateMode = 0
$label4.Font = New-Object System.Drawing.Font("Microsoft Sans Serif",9.75,0,3,204)

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 141
$System_Drawing_Point.Y = 113
$label4.Location = $System_Drawing_Point
$label4.Name = "label4"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 58
$System_Drawing_Size.Width = 348
$label4.Size = $System_Drawing_Size
$label4.TabIndex = 6
$label4.Text = "После нажатия кнопки 'Продолжить' система проведет ряд проверок и выдаст предложение запустить процесс резервирования."

$form1.Controls.Add($label4)

$label3.DataBindings.DefaultDataSourceUpdateMode = 0
$label3.Font = New-Object System.Drawing.Font("Microsoft Sans Serif",9.75,0,3,204)
$label3.ForeColor = [System.Drawing.Color]::FromArgb(255,0,0,0)

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 141
$System_Drawing_Point.Y = 65
$label3.Location = $System_Drawing_Point
$label3.Name = "label3"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 54
$System_Drawing_Size.Width = 348
$label3.Size = $System_Drawing_Size
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 100
$System_Drawing_Size.Width = 348
$label3.MaximumSize = $System_Drawing_Size
$label3.AutoSize = $True
$label3.TabIndex = 5
$label3.Text = "Помните, что эту операцию необходимо начинать, когда вы находитесь в офисе Компании и подключены к внутренней сети с помощью кабеля."

$form1.Controls.Add($label3)

$label2.DataBindings.DefaultDataSourceUpdateMode = 0
$label2.Font = New-Object System.Drawing.Font("Microsoft Sans Serif",9.75,0,3,204)
$label2.ForeColor = [System.Drawing.Color]::FromArgb(255,0,0,0)

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 141
$System_Drawing_Point.Y = 36
$label2.Location = $System_Drawing_Point
$label2.Name = "label2"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 28
$System_Drawing_Size.Width = 348
$label2.Size = $System_Drawing_Size
$label2.TabIndex = 4
$label2.Text = "Вы запустили систему резервирования файлов."
$label2.add_Click($handler_label2_Click)

$form1.Controls.Add($label2)


$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 0
$System_Drawing_Point.Y = 36
$pictureBox1.Location = $System_Drawing_Point
$pictureBox1.Name = "pictureBox1"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 100
$System_Drawing_Size.Width = 100
$pictureBox1.Size = $System_Drawing_Size
$pictureBox1.TabIndex = 3
$pictureBox1.TabStop = $False

$form1.Controls.Add($pictureBox1)

$label1.DataBindings.DefaultDataSourceUpdateMode = 0
$label1.Font = New-Object System.Drawing.Font("Microsoft Sans Serif",12,0,3,204)
$label1.ForeColor = [System.Drawing.Color]::FromArgb(255,0,0,0)

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 141
$System_Drawing_Point.Y = 12
$label1.Location = $System_Drawing_Point
$label1.Name = "label1"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 24
$System_Drawing_Size.Width = 348
$label1.Size = $System_Drawing_Size
$label1.TabIndex = 2
$label1.Text = "Внимание!"
$label1.TextAlign = 2
$label1.add_Click($handler_label1_Click)

$form1.Controls.Add($label1)


$button2.DataBindings.DefaultDataSourceUpdateMode = 0
$button2.Font = New-Object System.Drawing.Font("Microsoft Sans Serif",14.25,0,3,204)

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 326
$System_Drawing_Point.Y = 215
$button2.Location = $System_Drawing_Point
$button2.Name = "button2"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 34
$System_Drawing_Size.Width = 163
$button2.Size = $System_Drawing_Size
$button2.TabIndex = 1
$button2.Text = "Завершить"
$button2.UseVisualStyleBackColor = $True
$button2.add_Click($handler_button2_Click)
$form1.Controls.Add($button2)


$buttonstop.DataBindings.DefaultDataSourceUpdateMode = 0
$buttonstop.Font = New-Object System.Drawing.Font("Microsoft Sans Serif",14.25,0,3,204)

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 326
$System_Drawing_Point.Y = 215
$buttonstop.Location = $System_Drawing_Point
$buttonstop.Name = "buttonstop"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 34
$System_Drawing_Size.Width = 163
$buttonstop.Size = $System_Drawing_Size
$buttonstop.TabIndex = 1
$buttonstop.Text = "Прервать"
$buttonstop.UseVisualStyleBackColor = $True
$buttonstop.add_Click($handler_buttonstop_Click)


$button1.DataBindings.DefaultDataSourceUpdateMode = 0
$button1.Font = New-Object System.Drawing.Font("Microsoft Sans Serif",14.25,0,3,204)
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 141
$System_Drawing_Point.Y = 215
$button1.Location = $System_Drawing_Point
$button1.Name = "button1"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 34
$System_Drawing_Size.Width = 163
$button1.Size = $System_Drawing_Size
$button1.TabIndex = 0
$button1.Text = "Продолжить"
$button1.UseVisualStyleBackColor = $True
$button1.add_Click($handler_button1_Click)
$form1.Controls.Add($button1)


$button3.DataBindings.DefaultDataSourceUpdateMode = 0
$button3.Font = New-Object System.Drawing.Font("Microsoft Sans Serif",14.25,0,3,204)
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 141
$System_Drawing_Point.Y = 215
$button3.Location = $System_Drawing_Point
$button3.Name = "button3"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 34
$System_Drawing_Size.Width = 163
$button3.Size = $System_Drawing_Size
$button3.TabIndex = 0
$button3.Text = "Запустить"
$button3.UseVisualStyleBackColor = $True
$button3.add_Click($handler_button3_Click)


$buttonfinish.DataBindings.DefaultDataSourceUpdateMode = 0
$buttonfinish.Font = New-Object System.Drawing.Font("Microsoft Sans Serif",14.25,0,3,204)
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 326
$System_Drawing_Point.Y = 215
$buttonfinish.Location = $System_Drawing_Point
$buttonfinish.Name = "buttonfinish"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 34
$System_Drawing_Size.Width = 163
$buttonfinish.Size = $System_Drawing_Size
$buttonfinish.TabIndex = 0
$buttonfinish.Text = "Выйти"
$buttonfinish.UseVisualStyleBackColor = $True
$buttonfinish.add_Click($handler_buttonfinish_Click)

# Init ProgressBar
$progressbar.Maximum = 100
$progressbar.Minimum = 0
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 141
$System_Drawing_Point.Y = 70
$progressbar.Location = $System_Drawing_Point
$progressbar.Name = "progress1"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 20
$System_Drawing_Size.Width = 348
$progressbar.Size = $System_Drawing_Size
$progressbar.Style = 1
$progressbar.TabIndex = 7
$i = 0


#timer
$global:timer = New-Object System.Windows.Forms.Timer 
$timer.Interval = 1000

#endregion Generated Form Code

#Save the initial state of the form
$InitialFormWindowState = $form1.WindowState
#Init the OnLoad event to correct the initial state of the form
$form1.add_Load($OnLoadForm_StateCorrection)
#Show the Form
$form1.ShowDialog()| Out-Null

} #End Function
#функция получения предпочтительного сервера бэкапов на основе IP адреса
function GetMyBackupServer() {
	(gwmi -query "Select IPAddress From Win32_NetworkAdapterConfiguration Where IPEnabled = True").IPAddress | % { if($_ -match "192.168.") { $myip = $_ }}
	$backupfolder=""
	if ($myip -match "192.168.1.") {return ""}
	elseif ($myip -match "192.168.2[0-3].") {$backupfolder="\\server1\Usr_backup$"}
	elseif ($myip -match "192.168.2[6-7].") {$backupfolder="\\server1\Usr_backup$"}
	elseif ($myip -match "192.168.3.") {$backupfolder="\\server2\Usr_backup$"}
	else {return ""}
	return $backupfolder
}

function TestOfficeappsRunning(){
while (get-process "*word*"){
	$intAnswer=$a.popup("Внимание! У вас запущено приложение Microsoft Word. Закройте его для продолжения процесса резервирования", 0, "Система резервирования PGP дисков", 1)
	if ($intAnswer -ne 1) {$form1.close();break}
	}
while (get-process "*excel*"){
	$intAnswer=$a.popup("Внимание! У вас запущено приложение Microsoft Excel. Закройте его для продолжения процесса резервирования", 0, "Система резервирования PGP дисков", 1)
	if ($intAnswer -ne 1) {$form1.close();break}
	}
while (get-process "*outlook*"){
	$intAnswer=$a.popup("Внимание! У вас запущено приложение Microsoft Outlook. Закройте его для продолжения процесса резервирования", 0, "Система резервирования PGP дисков", 1)
	if ($intAnswer -ne 1) {$form1.close();break}
	}
while (get-process "*powerpnt*"){
	$intAnswer=$a.popup("Внимание! У вас запущено приложение Microsoft Powerpoint. Закройте его для продолжения процесса резервирования", 0, "Система резервирования PGP дисков", 1)
	if ($intAnswer -ne 1) {$form1.close();break}
	}
}


function ConvertTo-Encoding ([string]$From, [string]$To){
	Begin{
		$encFrom = [System.Text.Encoding]::GetEncoding($from)
		$encTo = [System.Text.Encoding]::GetEncoding($to)
	}
	Process{
		$bytes = $encTo.GetBytes($_)
		$bytes = [System.Text.Encoding]::Convert($encFrom, $encTo, $bytes)
		$encTo.GetString($bytes)
	}
}


#функция получения массива с PGP дисками
function GetPGPArray(){
$PGPprefs_xml="$usrprofile\AppData\Roaming\PGP Corporation\PGP\PGPprefs.xml"
$PGPprefs_txt="$usrprofile\Application Data\PGP Corporation\PGP\PGPprefs.txt"

if (Test-Path $PGPprefs_xml) {
	$pgpconfig=$PGPprefs_xml}
elseif (Test-Path $PGPprefs_txt) {
	$pgpconfig=$PGPprefs_txt}
else {
	$a.popup("Не удалось обнаружить в системе конфиг PGP")
	echo "$(get-date -format hh:mm:ss) - PGP has not been found in system" >> $log
	$form1.close()
	}
	
#проверка наличия конфига
if (get-item $pgpconfig) {$pgpdisklist = @()}
else {
	$a.popup("Не удалось обнаружить в системе конфигурацию Pgp Desktop")
	echo "$(get-date -format hh:mm:ss) - PGP Desktop config has not been found in system." >> $log
	$form1.close()
	}

get-content $pgpconfig | %{
	if ($_ -match "pgd</string>") {	$path=[regex]::replace($_,'^.*<string>','');$path=[regex]::replace($path,'</string>.*$','');$path=$path.replace('`n`t',''); $path=($path | convertto-encoding utf-8 windows-1251) ;$pgpdisklist += $path}
	}
#если диски не найдены, выход
if ($pgpdisklist.length -eq 0) {
	$a.popup("Не удалось обнаружить автоматически подключаемые PGP диски.")
	echo "$(get-date -format hh:mm:ss) - PGP automounted disks have not been found in system." >> $log
	$form1.close()
	}
	return $pgpdisklist
}
#функция подсчета размера всех PGP дисков
function GetPGPSize{
    param(
        [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [object[]]
        $pgpdisklist
    )
	process {
		for($i=0;$i -lt $pgpdisklist.length;$i++){
			$allpgpsize=$allpgpsize+(get-item $pgpdisklist[$i]).length
			$msg_disks=$msg_disks + $pgpdisklist[$i] + " "
		}
		return $allpgpsize
	}
}
#функция подсчета размера всех PGP дисков
function GetPGPSize_checkboxes{
    param(
        [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [object[]]
        $pgpdisklist
    )
	process {
		for($i=0;$i -lt $pgpdisklist.length;$i++){
			if ($pgpdisklist[$i].Checked -eq $True){
			$allpgpsize=$allpgpsize+(get-item $pgpdisklist[$i].Text).length}
		}
		return $allpgpsize
	}
}
#функция проверки доступности личной папки бэкапов, если нет, то создает
function TestBackupFolder(){
if (get-item $backuppath\$usrname -erroraction silentlycontinue -errorvariable e) {}
else {new-item -path $backuppath\$usrname -ItemType directory -erroraction silentlycontinue -errorvariable e}
if (get-item $backuppath\$usrname -erroraction silentlycontinue -errorvariable e) {}
else {
	$a.popup("РЕЗЕРВИРОВАНИЕ НЕ ЗАВЕРШЕНО
Не удалось создать каталог для осуществления бэкапа.")
	$form1.close()
	}
}

#функция проверяет коннект до сервера и выдает время в секундах, требуемое для копирования бэкапируемого файла
function TestConnectionSpeed($filesize){
if (get-item $usrprofile/testspeed.txt -ErrorAction silentlycontinue) {remove-item $usrprofile/testspeed.txt -force -ErrorAction silentlycontinue}
$testspeed=[System.IO.File]::Create("$usrprofile/testspeed.txt")
$testspeed.SetLength($file_size_for_speed_test)
$testspeed.Close()
$time_start=get-date
try {move-item -path "$usrprofile/testspeed.txt" -destination "$backuppath\$usrname" -force -ErrorAction silentlycontinue}
catch {
	$a.popup("Вы не запустили скрипт авторизации. Авторизуйтесь в сети, а потом перезапустите скрипт резервирования.")
	$form1.close()
	}
$time_stop=get-date
$estimatedcopytime=($(get-date) - $time_start).totalminutes*($filesize/$file_size_for_speed_test)

return $estimatedcopytime
}
#функция проверяет, не слишком ли долгим получится копирование
function TestBackupReason($backuppath,$estimatedcopytime){
if ($estimatedcopytime -gt 100) {
$intAnswer=$a.popup("В данный момент либо вы подключены по WIFI, либо нагрузка на сервер слишком велика. В любом случае, время копирования на сервер будет слишком велико. Запустите пожалуйста скрипт резервирования позднее или подключитесь к офисной сети по проводу и заново запустите скрипт резервирования", 0, "Система резервирования PGP дисков", 1 )
if ($intAnswer -ne 1) {$form1.close()}
if ($intAnswer -eq 1) {$form1.close()}
	}
}
#функция выводит окно предупреждения и позволяет запустить/отказаться от бэкапа
function ReadytoBackup_alert(){
    param(
        [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [object[]]
        $filesarray
    )
	process {
		$fileslength=GetPGPSize $filesarray
		$estimatedcopytime=TestConnectionSpeed($fileslength)
		TestBackupReason $backuppath $estimatedcopytime
		if (!$file) {$label2.Text="Было обнаружено "+$filesarray.length+" диск(ов), объемом "+ [math]::round($fileslength/1gb,1) +" Gb."}
		else {$label2.Text="Будет скопирован файл "+ $filesarray +" объемом "+ [math]::round($fileslength/1mb,1) +" Mb."}
		$label3.Text="Примерное время загрузки на сервер составит "+[math]::round($estimatedcopytime,1)+" минут. Во время этой операции запрещено работать на компьютере и отключать сетевой кабель. После нажатия на кнопку 'Продолжить' будет осуществлена попытка создания бэкапа."
		$form1.Controls.Remove($label4)
		return $estimatedcopytime
	}
}
#Функция генерирует файл со списком файлов, которые нужно бэкапить
function CreateBackupList(){
    param(
        [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [object[]]
        $pgpdisklist
    )
	process {
		remove-item "$backuppath\$usrname\pgplist.txt" -force -ErrorAction silentlycontinue
		new-item -path "$backuppath\$usrname\pgplist.txt" -itemtype file |out-null
		echo "Path, Destination" > "$backuppath\$usrname\pgplist.txt"
		for($i=0;$i -lt $pgpdisklist.length;$i++){
			$b=$pgpdisklist[$i]
			echo "$b, $backuppath\$usrname\$((get-item $pgpdisklist[$i]).basename)_$(get-date -format ddMMyy)$((get-item $pgpdisklist[$i]).extension)" >> "$backuppath\$usrname\pgplist.txt"
		}
	}
}
#Функция генерирует файл со списком файлов, которые нужно бэкапить
function CreateBackupListFromCheckboxes(){
    param(
        [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [object[]]
        $pgpdisklist
    )
	process {
		remove-item "$backuppath\$usrname\pgplist.txt" -force -ErrorAction silentlycontinue
		new-item -path "$backuppath\$usrname\pgplist.txt" -itemtype file |out-null
		echo "Path, Destination" > "$backuppath\$usrname\pgplist.txt"
		for($i=0;$i -lt $pgpdisklist.length;$i++){
			if ($pgpdisklist[$i].Checked -eq $True){
			$b=$pgpdisklist[$i].Text
			echo "$b, $backuppath\$usrname\$((get-item $b).basename)_$(get-date -format ddMMyy)$((get-item $b).extension)" >> "$backuppath\$usrname\pgplist.txt"
			}
		$form1.Controls.Remove($pgpdisklist[$i])
		}
	}
}

function Preparing(){
$global:backuppath=GetMyBackupServer
if ($backuppath -eq "") {
	$a.popup("Вы подключены к корпоративной сети по WiFi или VPN. Для выполнения бэкапа подключитесь к сети через сетевой кабель и перезапустите скрипт резервирования.")
	$form1.close()
	}
TestBackupFolder
$global:log="$backuppath\$usrname\$(get-date -format dd.MM.yyyy)backup.log"
if ($file) {
$label4.Text="$file . "
	echo "$(get-date -format hh:mm:ss) - Backup has been started. Server for backup: $backuppath" >> $log
	$files=@($file)
	echo "$(get-date -format hh:mm:ss) - File for backup: $pgpdisks" >> $log
	$fileslength=GetPGPSize $files
	$global:estimatedcopytime=ReadytoBackup_alert $files
	}
else {
	echo "$(get-date -format hh:mm:ss) - Backup has been started. Server for backup: $backuppath" >> $log
	$pgpdisks=@(GetPGPArray)
	echo "$(get-date -format hh:mm:ss) - PGP automounted disks have been found in system: $pgpdisks"  >> $log
	$fileslength=GetPGPSize $pgpdisks
	TestOfficeappsRunning
	$global:estimatedcopytime=ReadytoBackup_alert $pgpdisks
	$global:chkboxed=@(Preparing2 $pgpdisks)
	}
}

function Preparing2($disksarray) {
$chkboxed=@()
for($i=0;$i -lt $disksarray.length;$i++){
$global:checkBox1 = New-Object System.Windows.Forms.Checkbox
$checkBox1.DataBindings.DefaultDataSourceUpdateMode = 0
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 141
$System_Drawing_Point.Y = 140 + $i*20
$checkBox1.Location = $System_Drawing_Point
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 24
$System_Drawing_Size.Width = 348
$checkBox1.Size = $System_Drawing_Size
$checkBox1.Text = $disksarray[$i]
$checkBox1.TabIndex = 0
$checkBox1.Checked = $True
$checkBox1.UseVisualStyleBackColor = $True
$chkboxed+=$checkbox1
}
for($i=0;$i -lt $chkboxed.length;$i++){
$Form1.Controls.Add($chkboxed[$i])
}
return $chkboxed;
}

function Backup{
$label2.Text="Идет резервирование"
if ($file){$files=@("$file"); CreateBackupList $files} 
else {CreateBackupListFromCheckboxes $chkboxed} 
$Form1.Controls.Add($progressbar)
$label1.Text="Идёт резервирование"
if (!$file){
	GetPGPSize_checkboxes $chkboxed
	$estimatedcopytime=TestConnectionSpeed(GetPGPSize_checkboxes $chkboxed)
}
remove-job -name 'PGPCopy' -ErrorAction silentlycontinue
$estimatedcopytime_sec=[math]::round($estimatedcopytime*60,0)
$e=@()
$sec=0
$form1.Controls.Remove($label3)
$form1.Controls.Remove($button2)
$form1.Controls.Remove($button3)
$form1.Controls.Add($buttonstop)
$Form1.Controls.Add($label4)
echo "$(get-date -format hh:mm:ss) - Ready to copy disks or files. Estimated time: $estimatedcopytime_sec seconds" >> $log
Import-CSV "$backuppath\$usrname\pgplist.txt" | %{
	$label2.Text="Резервируем $($_.Path)"
	$copy={param($p,$d) copy-item -path $p -destination $d}
	echo "====== Job-name PGPCopy from: $($_.Path) ======= to: $($_.Destination) =======" >> $log
	$job= Start-Job -Name 'PGPCopy' -Scriptblock $copy -ArgumentList $_.Path, $_.Destination
	while (((get-job -Name 'PGPCopy' | select-object -last 1).State -eq "Running")) {
		[System.Windows.Forms.Application]::DoEvents() 
		$pctComplete=[math]::round((100*$sec)/$estimatedcopytime_sec,0)
		if ($pctComplete -gt 100) {$pctComplete=99}
		if (!$pctComplete) {$pctComplete=0}
		$progressbar.Value = $pctComplete
		if ($estimatedcopytime_sec-$sec -gt 0) {$est=$estimatedcopytime_sec-$sec}
		else {$est="еще немного"}
		$label4.Text="Завершено на $pctComplete % Осталось примерно : $est сек."
		$sec++
		sleep 1
		if ($stopped -eq $True) {
			$label4.Text="Процесс прерывается, подождите пожалуйста."
			remove-job $job -force
			break
			}
		}
	receive-job -name 'PGPCopy' -erroraction silentlycontinue -errorvariable e
	}
$progressbar.Value = 100
if (!$e){$label4.Text="Завершено на 100 % . 
Вы можете завершить работу скрипта"}
else {$label4.Text="Процесс прерван. РЕЗЕРВИРОВАНИЕ ОСУЩЕСТВЛЕНО НЕ БЫЛО. Попробуйте еще раз, в случае проблем обратитесь к администраторам 
Вы можете завершить работу скрипта"}
$form1.Controls.Remove($buttonstop)
$form1.Controls.Add($buttonfinish)
echo "$(get-date -format hh:mm:ss) - Files have been copyed. Errors: $e" >> $log
return $e
}

GenerateForm